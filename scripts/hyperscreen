#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""The main HyperScreen Console Script"""

from __future__ import division
from __future__ import print_function

from astropy.io import fits
from hyperscreen import hypercore
import os
import sys
from shutil import copyfile
import time
import glob
import argparse

from tqdm import tqdm as progressbar
import colorama
colorama.init()


def getArgs(argv=None):
    """[summary]

    Keyword Arguments:
        argv {[type]} -- [description] (default: {None})

    Returns:
        Namespace -- An argparse parse_args() object containing command line arguments
    """
    parser = argparse.ArgumentParser(
        description='Apply the HyperScreen algorithm to an ObsID direcotry or an HRC Level 1 Event File')

    parser.add_argument('evt1FITS_or_obsidDir', nargs='?')

    parser.add_argument('-s', '--softening', default=0.5, type=float)

    parser.add_argument('-c', '--comparison_products', action='store_true',
                        help='Make additional HyperScreen result images (rejected events & difference map)')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Make HyperScreen chatty on stdout.')

    parser.add_argument('-i', '--interactive', action='store_true', help='Run in interactive mode?')

    # parser.add_argument('-b', '--backup_dir', help='Absolute PATH to backup of EVT1 Files',
    #                     default=None)

    return parser.parse_args(argv)


def screenHRCevt1(evt1FITS_or_obsidDir, softening=0.5, hyperscreen_results_dict=None, comparison_products=True, savepath=None, verbose=True, backup=True):
    """[summary]

    Arguments:
        evt1FITS_or_obsidDir {[type]} -- [description]

    Keyword Arguments:
        softening {float} -- [description] (default: {0.5})
        hyperscreen_results_dict {[type]} -- [description] (default: {None})
        comparison_products {bool} -- [description] (default: {True})
        savepath {[type]} -- [description] (default: {None})
        verbose {bool} -- [description] (default: {True})
        backup {bool} -- [description] (default: {True})

    Raises:
        Exception: [description]
    """

    obsid = fits.getheader(evt1FITS_or_obsidDir)['OBS_ID']

    # Get the root string to use as our naming convention
    file_name = evt1FITS_or_obsidDir.split('/')[-1]  # Split off the path
    # Split off the .fits (or .fits.gz)
    file_root = file_name.split('.fits')[0].split('_')[0]
    file_path = os.path.realpath(os.path.dirname(evt1FITS_or_obsidDir))

    if savepath is None:
        savepath = file_path
    backup_dir = os.path.join(
        savepath, '{}_hyperscreen_report'.format(obsid))

    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
        if verbose is True:
            print("Made HyperScreen Products Directory {}".format(backup_dir))

    # Check if the passed input file is a string ending with .fits or .fits.gz
    if isinstance(evt1FITS_or_obsidDir, str):
        filetype_match = evt1FITS_or_obsidDir.split(
            '.')[-1] == 'fits' or evt1FITS_or_obsidDir.split('.')[-1] == 'gz'

        if filetype_match is False:
            raise Exception(
                'ERROR: Input given ({}) is not recognized as a .fits[.gz] or HRCevt1 object.'.format(evt1FITS_or_obsidDir))

    if hyperscreen_results_dict is None:
        # Then you need to make it!
        if verbose is True:
            print("Applying HyperScreen algorithm to {}".format(file_name))
        obs = hypercore.HRCevt1(evt1FITS_or_obsidDir, verbose=True)
        hyperscreen_results = obs.hyperscreen(softening=softening)
    else:
        hyperscreen_results = hyperscreen_results_dict

    hyperscreen_fits_file = os.path.join(file_path, 'hyperscreen_' + file_name)

    rejected_events_file = os.path.join(
        backup_dir, '{}_hyperscreen_rejected_events.fits'.format(obsid))
    # difference_map_file = file_path + '/hyperscreen_DIFFERENCE_MAP_' + file_name

    survival_mask = hyperscreen_results['All Survivals (boolean mask)']
    failure_mask = hyperscreen_results['All Failures (boolean mask)']

    with fits.open(evt1FITS_or_obsidDir) as hdul:
        original_data = hdul[1].data
        hdul[1].data = hdul[1].data[survival_mask]
        if verbose is True:
            print("Masking data with HyperScreen Results")
        hdul.writeto(hyperscreen_fits_file, overwrite=True)

        if verbose is True:
            print(
                "Wrote new HyperScreen-filtered evt1 file to {}".format(hyperscreen_fits_file))

        if comparison_products is True:
            hdul[1].data = original_data[failure_mask]
            hdul.writeto(rejected_events_file, overwrite=True)
            if verbose is True:
                print("Wrote Rejected Events Map {}".format(rejected_events_file))

    original_evt1_file_path = os.path.join(
        file_path, '{}_original_event_list.fits'.format(obsid))
    os.rename(evt1FITS_or_obsidDir, original_evt1_file_path)
    print("Backed up original evt1 file to {}".format(original_evt1_file_path))


def awesome_banner():
    """CLIs need epic banners
    """

    print(colorama.Fore.BLUE + ' ========================     This   is    =========================')
    print(colorama.Fore.RED + """         _   _                       _____
        | | | |                     /  ___|
        | |_| |_   _ _ __   ___ _ __\ `--.  ___ _ __ ___  ___ _ __
        |  _  | | | | '_ \ / _ \ '__|`--. \/ __| '__/ _ \/ _ \ '_ \
        | | | | |_| | |_) |  __/ |  /\__/ / (__| | |  __/  __/ | | |
        \_| |_/\__, | .__/ \___|_|  \____/ \___|_|  \___|\___|_| |_|
                __/ | |
               |___/|_|
    """)
    print(colorama.Fore.BLUE + ' ======   CHANDRA / HRC BACKGROUND REJECTION for the DARING   =====\n')


def main():
    '''
    Accept either an EVT1 file (.fits or .fits.gz) OR an ObsID Directory (e.g. 21218/) as input,
    read the EVT1 file, apply the hyperscreen algorithm, write a new EVT1 file,
    '''
    args = getArgs()
    inputpath = os.path.abspath(args.evt1FITS_or_obsidDir)

    # Decide whether the user gave an ObsID directory or an EVT1 Fits File
    if os.path.isdir(inputpath):
        inputdir = inputpath
        globresult = glob.glob(os.path.join(inputdir, '*/hrc*evt1.fits*'), recursive=True)
        if len(globresult) == 1:
            evt1fitsfile = globresult[0]
            if os.path.isfile(evt1fitsfile):
                print(colorama.Fore.GREEN + 'HRC EVT1 File Found: {}'.format(evt1fitsfile))
        else:
            raise Exception(colorama.Fore.RED + 'ERROR: Something is wrong with the input directory {}'.format(inputdir))

        hyperscreendir = inputdir + '/hyperscreen_results/'
        secondarydir = inputdir + '/secondary/'

        if os.path.isdir(secondarydir):
            print(colorama.Fore.CYAN + 'Found /secondary/ within {}'.format(inputdir))
        else:
            raise Exception(colorama.Fore.RED +
                            'ERROR: It looks like you may have intended to supply an ObsID Directory, but I cannot find {}/secondary/*_evt1.fits[.gz]'.format(inputdir))

    elif os.path.isfile(inputpath):
        try:
            fits.getheader(inputpath)
            evt1fitsfile = inputpath
            print(colorama.Fore.GREEN + 'Found HRC EVT1 file {}'.format(evt1fitsfile))

        except:
            raise Exception(colorama.Fore.RED + "ERROR: It looks like you gave me a file, but it cannot be read. Are you sure it's an EVT1 FITS file?")
    else:
        raise Exception(colorama.Fore.RED + "ERROR: Input file no found: {}".format(inputpath))

    # Regardless of how this tree played out, you should now have a proper EVT1 file. We want to create a hyperscreen/ directory
    parent_dir = os.path.abspath(os.path.join(evt1fitsfile, os.pardir))
    hyperscreen_results_dir = os.path.join(parent_dir, 'hyperscreen_results/')

    print(colorama.Fore.BLUE + '\nHyperScreen result files will be placed in a new, adjacent directory: ' + colorama.Fore.YELLOW + '{}'.format(hyperscreen_results_dir))
    if not os.path.exists(hyperscreen_results_dir):
        os.makedirs(hyperscreen_results_dir)
        print(colorama.Fore.MAGENTA + 'Making this directory now. It looks like this is the first time you are running HyperScreen on this EVT1 File.')
    else:
        print(colorama.Fore.MAGENTA + "This directory already exists, probably because youve run HyperScreen before. " +
              colorama.Fore.RED + "\nThat's fine, but note that everything in it will be overwritten! \nHyperScreen is lossy, and so should only be run with one iteration on an EVT1 File!")

    backup_evt1_filename = 'ORIGINAL_' + evt1fitsfile.split('/')[-1]
    backup_evt1_path = os.path.join(hyperscreen_results_dir, backup_evt1_filename)
    print(colorama.Fore.BLUE + '\nSaving a backup of the original EVT1 file to: ' + colorama.Fore.YELLOW + '{}'.format(backup_evt1_path))
    copyfile(evt1fitsfile, backup_evt1_path)

    obs = hypercore.HRCevt1(evt1fitsfile, verbose=True)

    print(colorama.Fore.BLUE + '\nApplying HyperScreen to DataFrame with softening = {}'.format(args.softening))
    hyperscreen_results = obs.hyperscreen(softening=args.softening)

    # screenHRCevt1(args.evt1FITS_or_obsidDir, softening=args.softening, verbose=True,
    #               comparison_products=args.comparison_products)


if __name__ == "__main__":

    start_time = time.time()
    awesome_banner()
    main()  # pragma: no cover
    runtime = round((time.time() - start_time) / 60, 3)
    sys.exit(print("Finished in {} minutes".format(runtime)))
